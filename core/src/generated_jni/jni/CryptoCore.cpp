// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#include "CryptoCore.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

CryptoCore::CryptoCore() : ::djinni::JniInterface<::crypto::core::api::CryptoCore, CryptoCore>("io/aetheras/djinni/CryptoCore$CppProxy") {}

CryptoCore::~CryptoCore() = default;


CJNIEXPORT void JNICALL Java_io_aetheras_djinni_CryptoCore_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::crypto::core::api::CryptoCore>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_io_aetheras_djinni_CryptoCore_00024CppProxy_getStringVersion(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::crypto::core::api::CryptoCore::getStringVersion();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_io_aetheras_djinni_CryptoCore_00024CppProxy_getIntVersion(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::crypto::core::api::CryptoCore::getIntVersion();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
