// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from greeting.djinni

#pragma once

#include "../../generated_api/greeting_display.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class GreetingDisplay final : ::djinni::JniInterface<::crypto::core::api::GreetingDisplay, GreetingDisplay> {
public:
    using CppType = std::shared_ptr<::crypto::core::api::GreetingDisplay>;
    using CppOptType = std::shared_ptr<::crypto::core::api::GreetingDisplay>;
    using JniType = jobject;

    using Boxed = GreetingDisplay;

    ~GreetingDisplay();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<GreetingDisplay>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<GreetingDisplay>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    GreetingDisplay();
    friend ::djinni::JniClass<GreetingDisplay>;
    friend ::djinni::JniInterface<::crypto::core::api::GreetingDisplay, GreetingDisplay>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::crypto::core::api::GreetingDisplay
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void display(const ::crypto::core::api::Greeting & greeting) override;

    private:
        friend ::djinni::JniInterface<::crypto::core::api::GreetingDisplay, ::djinni_generated::GreetingDisplay>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/aetheras/djinni/GreetingDisplay") };
    const jmethodID method_display { ::djinni::jniGetMethodID(clazz.get(), "display", "(Lio/aetheras/djinni/Greeting;)V") };
};

}  // namespace djinni_generated
